LexerError: <
    unexpected_char: Char
    illegal_identifier: String
    illegal_type_identifier: String
    illegal_value_identifier: String
    no_source_provided: ()
    multiple_decimal_points: ()
    illegal_number: String
>

Lexer: (
    source: Option(String)
    tokens: []Token
    cur_tok: String
    tok_kind: TokKind
    prev: [2]Char
    stall: USize
    is_decimal: Bool

    new_from_file(&file: File): Result(Lexer, std.io.Error) {
        source = &file->read_to_string()
        Result(Lexer, std.io.Error).ok(Lexer(
            source: Option(String).Some(source)
            tokens: []
            cur_tok: ""
            tok_kind: TokKind.unknown
            prev: ['\0', '\0']
            stall: 0
            is_decimal: false
        ))
    }

    tokenize_ident(&self: Lexer, c: Char): Result(Bool, LexerError) {
        // TODO
    }

    // TODO
)

Token: <
    vident: String
    tident: String
    number: String
    character: char
    string: String
    equals: (),
    assign: (),
    operator_equals: Operator
    colon: (),
    separator: Separator
    comment: String
    open: Grouping
    close: Grouping
    operator: Operator
>

Grouping: <
    paren: ()
    bracket: ()
    angle: ()
    curly: ()

	..(
		open_char(self: Grouping): self->&[
			Grouping.paren => '('
			Grouping.bracket => '['
			Grouping.angle => '<'
			Grouping.curly => '{'
		]

		close_char(self: Grouping): self->&[
			Grouping.paren => ')'
			Grouping.bracket => ']'
			Grouping.angle => '>'
			Grouping.curly => '}'
		]
	)
>

Separator: <
    comma: ()
    newliene: ()
    double_newline: ()

    ..ToString(Separator)(
        to_string(self: Separator): self->&[
            Separator.comma => ","
            Separator.newline => "\n"
            Separator.double_newline => "\n\n"
        ]

		to_string(self: Separator): {
			self.comma { "," }
			self.newline { "\n" }
			self.double_newline { "\n\n" }
		}
    )
>

Operator: <
    Dot: ()
    Plus: ()
    Minus: ()
    Times: ()
    Divide: ()
    Concat: ()
    Repeat: ()
    And: ()
    Or: ()
    Not: ()
    ThinArrow: ()
    FatArrow: ()
    Question: ()
    Length: ()
    Range: ()
>
